/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  struct,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type JoinGameInstructionAccounts = {
  game: PublicKey | Pda;
  playerEscrowTokenAccount: PublicKey | Pda;
  playerTokenAccount: PublicKey | Pda;
  mint: PublicKey | Pda;
  treasury: PublicKey | Pda;
  settings: PublicKey | Pda;
  player: Signer;
  tokenProgram?: PublicKey | Pda;
  systemProgram?: PublicKey | Pda;
};

// Data.
export type JoinGameInstructionData = { hash: Uint8Array };

export type JoinGameInstructionDataArgs = JoinGameInstructionData;

export function getJoinGameInstructionDataSerializer(): Serializer<
  JoinGameInstructionDataArgs,
  JoinGameInstructionData
> {
  return struct<JoinGameInstructionData>([['hash', bytes({ size: 32 })]], {
    description: 'JoinGameInstructionData',
  }) as Serializer<JoinGameInstructionDataArgs, JoinGameInstructionData>;
}

// Args.
export type JoinGameInstructionArgs = JoinGameInstructionDataArgs;

// Instruction.
export function joinGame(
  context: Pick<Context, 'programs'>,
  input: JoinGameInstructionAccounts & JoinGameInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'rockPaperScissors',
    'rock7uz5eZdz8fb1ZEfZ1aR428ncvkYBrgebwyzaqBG'
  );

  // Accounts.
  const resolvedAccounts = {
    game: { index: 0, isWritable: true as boolean, value: input.game ?? null },
    playerEscrowTokenAccount: {
      index: 1,
      isWritable: true as boolean,
      value: input.playerEscrowTokenAccount ?? null,
    },
    playerTokenAccount: {
      index: 2,
      isWritable: true as boolean,
      value: input.playerTokenAccount ?? null,
    },
    mint: { index: 3, isWritable: false as boolean, value: input.mint ?? null },
    treasury: {
      index: 4,
      isWritable: true as boolean,
      value: input.treasury ?? null,
    },
    settings: {
      index: 5,
      isWritable: false as boolean,
      value: input.settings ?? null,
    },
    player: {
      index: 6,
      isWritable: true as boolean,
      value: input.player ?? null,
    },
    tokenProgram: {
      index: 7,
      isWritable: false as boolean,
      value: input.tokenProgram ?? null,
    },
    systemProgram: {
      index: 8,
      isWritable: false as boolean,
      value: input.systemProgram ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: JoinGameInstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.tokenProgram.value) {
    resolvedAccounts.tokenProgram.value = context.programs.getPublicKey(
      'splToken',
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
    );
    resolvedAccounts.tokenProgram.isWritable = false;
  }
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      'splSystem',
      '11111111111111111111111111111111'
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getJoinGameInstructionDataSerializer().serialize(
    resolvedArgs as JoinGameInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
