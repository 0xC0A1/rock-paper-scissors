/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  i64,
  struct,
  u64,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type UpdateSettingsInstructionAccounts = {
  settings: PublicKey | Pda;
  signer: Signer;
};

// Data.
export type UpdateSettingsInstructionData = {
  timeForPenalization: bigint;
  timeForStale: bigint;
  playerFeeLamports: bigint;
};

export type UpdateSettingsInstructionDataArgs = {
  timeForPenalization: number | bigint;
  timeForStale: number | bigint;
  playerFeeLamports: number | bigint;
};

export function getUpdateSettingsInstructionDataSerializer(): Serializer<
  UpdateSettingsInstructionDataArgs,
  UpdateSettingsInstructionData
> {
  return struct<UpdateSettingsInstructionData>(
    [
      ['timeForPenalization', i64()],
      ['timeForStale', i64()],
      ['playerFeeLamports', u64()],
    ],
    { description: 'UpdateSettingsInstructionData' }
  ) as Serializer<
    UpdateSettingsInstructionDataArgs,
    UpdateSettingsInstructionData
  >;
}

// Args.
export type UpdateSettingsInstructionArgs = UpdateSettingsInstructionDataArgs;

// Instruction.
export function updateSettings(
  context: Pick<Context, 'programs'>,
  input: UpdateSettingsInstructionAccounts & UpdateSettingsInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'rockPaperScissors',
    'rock7uz5eZdz8fb1ZEfZ1aR428ncvkYBrgebwyzaqBG'
  );

  // Accounts.
  const resolvedAccounts = {
    settings: {
      index: 0,
      isWritable: true as boolean,
      value: input.settings ?? null,
    },
    signer: {
      index: 1,
      isWritable: true as boolean,
      value: input.signer ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: UpdateSettingsInstructionArgs = { ...input };

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getUpdateSettingsInstructionDataSerializer().serialize(
    resolvedArgs as UpdateSettingsInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
