/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  struct,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';
import { Choice, ChoiceArgs, getChoiceSerializer } from '../types';

// Accounts.
export type RevealChoiceInstructionAccounts = {
  game: PublicKey | Pda;
  player: Signer;
  systemProgram?: PublicKey | Pda;
};

// Data.
export type RevealChoiceInstructionData = { choice: Choice; salt: Uint8Array };

export type RevealChoiceInstructionDataArgs = {
  choice: ChoiceArgs;
  salt: Uint8Array;
};

export function getRevealChoiceInstructionDataSerializer(): Serializer<
  RevealChoiceInstructionDataArgs,
  RevealChoiceInstructionData
> {
  return struct<RevealChoiceInstructionData>(
    [
      ['choice', getChoiceSerializer()],
      ['salt', bytes({ size: 32 })],
    ],
    { description: 'RevealChoiceInstructionData' }
  ) as Serializer<RevealChoiceInstructionDataArgs, RevealChoiceInstructionData>;
}

// Args.
export type RevealChoiceInstructionArgs = RevealChoiceInstructionDataArgs;

// Instruction.
export function revealChoice(
  context: Pick<Context, 'programs'>,
  input: RevealChoiceInstructionAccounts & RevealChoiceInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'rockPaperScissors',
    'rock7uz5eZdz8fb1ZEfZ1aR428ncvkYBrgebwyzaqBG'
  );

  // Accounts.
  const resolvedAccounts = {
    game: { index: 0, isWritable: true as boolean, value: input.game ?? null },
    player: {
      index: 1,
      isWritable: false as boolean,
      value: input.player ?? null,
    },
    systemProgram: {
      index: 2,
      isWritable: false as boolean,
      value: input.systemProgram ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: RevealChoiceInstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      'splSystem',
      '11111111111111111111111111111111'
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getRevealChoiceInstructionDataSerializer().serialize(
    resolvedArgs as RevealChoiceInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
