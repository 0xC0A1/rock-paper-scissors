/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  i64,
  publicKey as publicKeySerializer,
  struct,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';

export type Settings = Account<SettingsAccountData>;

export type SettingsAccountData = {
  bump: number;
  timeForPenalization: bigint;
  timeForStale: bigint;
  treasury: PublicKey;
  playerFeeLamports: bigint;
};

export type SettingsAccountDataArgs = {
  bump: number;
  timeForPenalization: number | bigint;
  timeForStale: number | bigint;
  treasury: PublicKey;
  playerFeeLamports: number | bigint;
};

export function getSettingsAccountDataSerializer(): Serializer<
  SettingsAccountDataArgs,
  SettingsAccountData
> {
  return struct<SettingsAccountData>(
    [
      ['bump', u8()],
      ['timeForPenalization', i64()],
      ['timeForStale', i64()],
      ['treasury', publicKeySerializer()],
      ['playerFeeLamports', u64()],
    ],
    { description: 'SettingsAccountData' }
  ) as Serializer<SettingsAccountDataArgs, SettingsAccountData>;
}

export function deserializeSettings(rawAccount: RpcAccount): Settings {
  return deserializeAccount(rawAccount, getSettingsAccountDataSerializer());
}

export async function fetchSettings(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Settings> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'Settings');
  return deserializeSettings(maybeAccount);
}

export async function safeFetchSettings(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Settings | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeSettings(maybeAccount) : null;
}

export async function fetchAllSettings(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Settings[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'Settings');
    return deserializeSettings(maybeAccount);
  });
}

export async function safeFetchAllSettings(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Settings[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeSettings(maybeAccount as RpcAccount));
}

export function getSettingsGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'rockPaperScissors',
    'rock7uz5eZdz8fb1ZEfZ1aR428ncvkYBrgebwyzaqBG'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      bump: number;
      timeForPenalization: number | bigint;
      timeForStale: number | bigint;
      treasury: PublicKey;
      playerFeeLamports: number | bigint;
    }>({
      bump: [0, u8()],
      timeForPenalization: [1, i64()],
      timeForStale: [9, i64()],
      treasury: [17, publicKeySerializer()],
      playerFeeLamports: [49, u64()],
    })
    .deserializeUsing<Settings>((account) => deserializeSettings(account));
}

export function getSettingsSize(): number {
  return 57;
}
